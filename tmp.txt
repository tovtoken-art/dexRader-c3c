"use client";

import { useEffect, useMemo, useState } from "react";
import { supabase as sb } from "../lib/supabase";
import WalletCell from "./components/WalletCell";

const nf0 = new Intl.NumberFormat("en-US", { maximumFractionDigits: 0 });
const nf6 = new Intl.NumberFormat("en-US", { maximumFractionDigits: 6 });

type Whale = { [k: string]: any };
type LabelMap = Record<string, string>;

function short(x: string) {
  return x?.length > 12 ? `${x.slice(0, 6)}??{x.slice(-6)}` : x;
}
function sign0(n: number) {
  const v = Number(n || 0);
  const s = v >= 0 ? "+" : "";
  return s + nf0.format(Math.abs(v));
}
function sign6(n: number) {
  const v = Number(n || 0);
  const s = v >= 0 ? "+" : "";
  return s + v.toFixed(6);
}
function tone(n: number) {
  if (n > 0) return "text-emerald-400";
  if (n < 0) return "text-rose-400";
  return "text-neutral-300";
}
function cls(...xs: Array<string | false | null | undefined>) {
  return xs.filter(Boolean).join(" ");
}

// Safe accessor for wallet address (supports Korean column name "지�? or fallback "wallet")
function getWallet(w: any): string {
  try {
    return String((w as any)?.["지�?] || (w as any)?.wallet || "");
  } catch {
    return "";
  }
}

export default function WhaleTabs({
  whales,
  lastPriceSOLperC3C
}: {
  whales: Whale[];
  lastPriceSOLperC3C: number;
}) {
  const [tab, setTab] = useState<"buy" | "sell">("buy");
  const [labels, setLabels] = useState<LabelMap>({});
  const [hover, setHover] = useState<string | null>(null);
  const [q, setQ] = useState("");
  const [watchOnly, setWatchOnly] = useState(false);
  const [watch, setWatch] = useState<string[]>(
    () => { try { return JSON.parse(localStorage.getItem("watchlist")||"[]"); } catch { return []; } }
  );
  const [pnlMap, setPnlMap] = useState<Record<string, { R: number; U: number; Q: number; A: number; C: number }>>({});

  useEffect(() => {
    (async () => {
      const wallets = (whales ?? []).map(w => String(w["지�?])).filter(Boolean);
      if (!wallets.length) return;
      const { data } = await sb
        .from("wallet_labels_c3c")
        .select("wallet,label")
        .in("wallet", wallets.slice(0, 500));
      const map: LabelMap = {};
      for (const r of data ?? []) map[r.wallet] = r.label;
      setLabels(map);
    })();
  }, [whales]);

  // Average-cost PnL per wallet (realized/unrealized)
  useEffect(() => {
    (async () => {
      try {
      const wallets = (whales ?? []).map(w => getWallet(w)).filter(Boolean);
        if (!wallets.length) { setPnlMap({}); return; }

        const { data: trades } = await sb
          .from("trade_events")
          .select("ts,wallet,side,c3c_amount,sol_amount,price_c3c_per_sol,price_sol_per_c3c")
          .in("wallet", wallets.slice(0, 500))
          .order("ts", { ascending: true });

        const map: Record<string, { R: number; U: number; Q: number; A: number; C: number }> = {};

        function stFor(w: string) {
          if (!map[w]) map[w] = { R: 0, U: 0, Q: 0, A: 0, C: 0 };
          return map[w];
        }

        for (const r of trades ?? []) {
          const w = String((r as any)?.wallet || "");
          if (!w) continue;
          const side = (r as any)?.side === "SELL" ? "SELL" : "BUY";
          const Q_amt = Number((r as any)?.c3c_amount ?? 0) || 0;
          const S_amt = Number((r as any)?.sol_amount ?? 0) || 0;
          const st = stFor(w);

          if (side === "BUY") {
            const C1 = st.C + S_amt;
            const Q1 = st.Q + Q_amt;
            const A1 = Q1 > 0 ? C1 / Q1 : 0;
            st.C = C1; st.Q = Q1; st.A = A1;
          } else {
            const realizedInc = S_amt - st.A * Q_amt;
            st.R += realizedInc;
            st.C = st.C - st.A * Q_amt;
            st.Q = st.Q - Q_amt;
            if (st.Q <= 0) { st.Q = 0; st.C = 0; st.A = 0; }
          }
        }

        for (const w of Object.keys(map)) {
          const st = map[w];
          st.U = st.Q > 0 ? (Number(lastPriceSOLperC3C || 0) - st.A) * st.Q : 0;
        }

        setPnlMap(map);
      } catch {
        // ignore
      }
    })();
  }, [whales, lastPriceSOLperC3C]);

  const byC3C = useMemo(
    () => [...(whales ?? [])]
      .sort((a, b) => Number(b["?�매??C3C"] || 0) - Number(a["?�매??C3C"] || 0))
      .map((w, i) => ({ ...w, _rank: i + 1 })),
    [whales]
  );
  const bySOL = useMemo(
    () => [...(whales ?? [])]
      .sort((a, b) => Number(b["?�매??SOL"] || 0) - Number(a["?�매??SOL"] || 0))
      .map((w, i) => ({ ...w, _rank: i + 1 })),
    [whales]
  );

  const rowsBase = tab === "buy" ? byC3C : bySOL;
  const rows = rowsBase.filter((w: any) => {
    const wallet = String(w["지�?] || "");
    const okSearch = !q || wallet.toLowerCase().includes(q.toLowerCase()) || (labels[wallet] || "").includes(q);
    const okWatch = !watchOnly || watch.includes(wallet);
    return okSearch && okWatch;
  });

  const maxMetric = useMemo(() => {
    const nums = rows.map(w => Math.abs(Number(tab === "buy" ? w["?�매??C3C"] : w["?�매??SOL"]) || 0));
    return Math.max(1, ...nums);
  }, [rows, tab]);

  async function setLabel(wallet: string) {
    const current = labels[wallet] || "";
    const label = window.prompt("지�??�벨???�력", current ?? "");
    if (label == null) return;
    const { error } = await sb.from("wallet_labels_c3c").upsert({ wallet, label });
    if (error) { alert("?�벨 ?�???�패"); return; }
    setLabels(m => ({ ...m, [wallet]: label }));
  }
  function toggleWatch(wallet: string){
    setWatch(prev => {
      const next = prev.includes(wallet) ? prev.filter(x=>x!==wallet) : [...prev, wallet];
      localStorage.setItem("watchlist", JSON.stringify(next));
      return next;
    });
  }

  return (
    <section className="card card-rank">
      <div className="section-head head-rank">
        <span className="head-icon icon-rank">
          <svg width="18" height="18" viewBox="0 0 24 24" className="text-violet-200" fill="currentColor">
            <path d="M3 11c0 3.5 3 6 7.5 6h3.3c3.1 0 5.7-2.3 6.1-5.4l.1-.6c.1-1-.7-1.8-1.6-1.8h-3.1c-.7 0-1.3-.3-1.8-.8l-1-1a2 2 0 0 0-1.4-.6H9c-3.3 0-6 2.2-6 4.2Zm5.5-.8a.8.8 0 1 0 0-1.6.8.8 0 0 0 0 1.6Z"/>
          </svg>
        </span>
        <div className="flex-1">
          <h2 className="h1">고래 ?�위</h2>
          <p className="sub">{tab === "buy" ? "C3C 기�? ?�위" : "SOL 기�? ?�위"} · 기�?가 {nf6.format(lastPriceSOLperC3C)} SOL/C3C</p>
        </div>
        <span className="kicker kicker-violet">RANK</span>
      </div>

      <div className="section-body">
        <div className="flex flex-col sm:flex-row gap-2 w-full md:w-auto mb-4">
          <div className="flex gap-2 bg-neutral-900/60 border border-neutral-700 rounded-xl p-1">
            <button onClick={() => setTab("buy")} className={cls("px-3 py-1 rounded-lg touch", tab==="buy"?"bg-violet-500/20":"hover:bg-white/5")}>?�매????��</button>
            <button onClick={() => setTab("sell")} className={cls("px-3 py-1 rounded-lg touch", tab==="sell"?"bg-violet-500/20":"hover:bg-white/5")}>?�매????��</button>
          </div>
          <div className="flex gap-2">
            <input className="input" placeholder="지�??�는 ?�벨 검?? value={q} onChange={(e)=>setQ(e.target.value)} />
            <label className="switch">
              <input type="checkbox" checked={watchOnly} onChange={(e)=>setWatchOnly(e.target.checked)} />
              <span>관?�만</span>
            </label>
          </div>
        </div>

        {/* ?�스?�톱 ??*/}
        <div className="desktop-only overflow-x-auto">
          <table className="table">
            <thead className="thead-sticky">
              <tr>
                <th className="th">?�위</th>
                <th className="th">지�?/th>
                <th className="th">{tab==="buy" ? "?�매??C3C" : "?�매??SOL"}</th>
                <th className="th">{tab==="buy" ? "?�매??SOL" : "?�매??C3C"}</th>
                <th className="th">?�현?�익(SOL)</th>
                <th className="th">미실?�손??SOL)</th>
              </tr>
            </thead>
            <tbody>
              {rows.map((w: any) => {
                const wallet = String(w["지�?]);
                const netC3C = Number(w["?�매??C3C"] || 0);
                const netSOL = Number(w["?�매??SOL"] || 0);

                // ???�전 방식?�로 고정: PnL(SOL) = netSOL + netC3C * lastPrice
                const st = pnlMap[wallet] || { R: 0, U: 0, Q: 0, A: 0, C: 0 };
                const pnlSOL = netSOL + netC3C * Number(lastPriceSOLperC3C || 0);

                const metric = Math.abs(Number(tab === "buy" ? netC3C : netSOL));
                const widthPct = Math.max(2, Math.min(100, Math.round(100 * metric / maxMetric)));

                return (
                  <tr
                    key={wallet}
                    onMouseEnter={() => setHover(wallet)}
                    onMouseLeave={() => setHover(null)}
                    className={cls("transition", hover === wallet && "bg-violet-900/10 ring-1 ring-violet-700/30")}
                  >
                    <td className="td">{w._rank}</td>
                    <td className="td">
                      <WalletCell addr={wallet} label={labels[wallet]} onEdit={() => setLabel(wallet)} onWatchToggle={() => toggleWatch(wallet)} watched={watch.includes(wallet)} />
                    </td>

                    <td className={cls("td", tone(tab==="buy"?netC3C:netSOL))}>
                      <div className="flex items-center justify-between gap-3">
                        <span>{tab==="buy" ? sign0(netC3C) : sign6(netSOL)}</span>
                        <span className="text-[10px] text-neutral-400">{widthPct}%</span>
                      </div>
                      <div className="rankwrap"><div className="rankbar" style={{ width: `${widthPct}%` }} /></div>
                    </td>

                    <td className={cls("td", tone(tab==="buy"?netSOL:netC3C))}>
                      {tab==="buy" ? sign6(netSOL) : sign0(netC3C)}
                    </td>

                    <td className={cls("td", st.R >= 0 ? "text-emerald-400" : "text-rose-400")}>
                      {sign6(st.R)}
                    </td>
                    <td className={cls("td", st.U >= 0 ? "text-emerald-400" : "text-rose-400")}>
                      {sign6(st.U)}
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>

        {/* 모바??카드 */}
        <div className="mobile-only space-y-3">
          {rows.map((w: any) => {
            const wallet = String(w["지�?]);
            const netC3C = Number(w["?�매??C3C"] || 0);
            const netSOL = Number(w["?�매??SOL"] || 0);
            const st = pnlMap[wallet] || { R: 0, U: 0, Q: 0, A: 0, C: 0 };
            const pnlSOL = netSOL + netC3C * Number(lastPriceSOLperC3C || 0);
            const metric = Math.abs(Number(tab === "buy" ? netC3C : netSOL));
            const widthPct = Math.max(2, Math.min(100, Math.round(100 * metric / maxMetric)));

            return (
              <div key={wallet} className="mcard mcard-rank">
                <div className="mrow">
                  <div className="font-mono">{short(wallet)}</div>
                  {labels[wallet] && <span className="badge badge-emerald">{labels[wallet]}</span>}
                </div>
                <div className="mrow"><span className="mkey">?�위</span><span className="mval">{w._rank}</span></div>
                <div className="mrow">
                  <span className="mkey">{tab==="buy" ? "?�매??C3C" : "?�매??SOL"}</span>
                  <span className="mval">{tab==="buy" ? sign0(netC3C) : sign6(netSOL)}</span>
                </div>
                <div className="rankwrap"><div className="rankbar" style={{ width: `${widthPct}%` }} /></div>
                <div className="mrow">
                  <span className="mkey">{tab==="buy" ? "?�매??SOL" : "?�매??C3C"}</span>
                  <span className="mval">{tab==="buy" ? sign6(netSOL) : sign0(netC3C)}</span>
                </div>
                <div className="mrow">
                  <span className="mkey">?�현?�익(SOL)</span>
                  <span className={cls("mval", (st.R>=0) ? "text-emerald-400" : "text-rose-400")}>{sign6(st.R)}</span>
                </div>
                <div className="mrow">
                  <span className="mkey">미실?�손??SOL)</span>
                  <span className={cls("mval", (st.U>=0) ? "text-emerald-400" : "text-rose-400")}>{sign6(st.U)}</span>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </section>
  );
}

